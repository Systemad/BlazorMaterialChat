@page "/authentication/register"
@using BlazorMaterialChat.Client.Services
@using BlazorMaterialChat.Shared.Models
@layout AuthLayout
@inject NavigationManager NavigationManager
@inject CustomStateProvider AuthStateProvider

<MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>
<MudText>Already have an account? <MudLink Href="/authentication/login">Sign In</MudLink></MudText>

<MudTextField @bind-Value="RegisterRequest.UserName" Label="Username" Variant="Variant.Outlined" Class="my-4"></MudTextField>

<MudTextField @bind-Value="RegisterRequest.Password" Label="Password" Variant="Variant.Outlined" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Class="mt-4"/>

<MudTextField @bind-Value="RegisterRequest.PasswordConfirm" Label="Password" Variant="Variant.Outlined" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Class="mt-4"/>

@if (Error != null)
{
    <MudAlert Severity="Severity.Warning" Class="mt-8 mud-width-full" Style="max-width:500px;">@Error</MudAlert>
}

<MudCheckBox @bind-Checked="@AgreeToTerms" Label="I agree to the terms and privacy" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!AgreeToTerms)" OnClick="OnSubmit" Size="Size.Large" FullWidth="true">Register</MudButton>
@functions{
    RegisterRequest RegisterRequest { get; set; } = new RegisterRequest();
    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    string Error { get; set; }
    public bool AgreeToTerms { get; set; }
    
    async Task OnSubmit()
    {
        Error = null;
        try
        {
            await AuthStateProvider.Register(RegisterRequest);
            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
    
    void TogglePasswordVisibility()
    {
    @if (_passwordVisibility)
    {
        _passwordVisibility = false;
        _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        _passwordInput = InputType.Password;
    }
    else
    {
        _passwordVisibility = true;
        _passwordInputIcon = Icons.Material.Filled.Visibility;
        _passwordInput = InputType.Text;
    }
    }
}